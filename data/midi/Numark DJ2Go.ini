[info]
devicename=Numark DJ2Go
debug=0

; controls that send button presses via midi note on/off.
;
[controller.buttons]
A_CUE=$33
A_PLAY=$3B
A_SYNC=$40
A_PFL=$65
A_LOAD=$4B
A_BEND_UP=$43
A_BEND_DOWN=$44
B_CUE=$3C
B_PLAY=$42
B_SYNC=$47
B_PFL=$66
B_LOAD=$34
B_BEND_UP=$45
B_BEND_DOWN=$46
BACK=$59
ENTER=$5A

; controls that send absolute position values.
;
[controller.absolute]
A_VOLUME=$08
B_VOLUME=$09
A_PITCH=$0D
B_PITCH=$0E
CROSSFADER=$0A
GAIN_MASTER=$17
GAIN_PHONES=$0B

; controls that send relative values.
; currently hardcoded for 7-bit two's complement.
;
[controller.relative]
BROWSE=$1A
A_WHEEL=$19
B_WHEEL=$18

; format: CONTROL=groupname
; allows grouping of similarly functioning controls to
; simplify mapping to actions.
; For example, instead of mapping like:
;   BTN_PLAY_LEFT=deck.play(1)
;   BTN_PLAY_RIGHT=deck.play(2)
; you can group the Play buttons and map them as:
;   BTN_PLAY=deck.play()
;
[groups]
;CUE=A_CUE B_CUE
A_CUE=CUE
B_CUE=CUE
;PLAY=A_PLAY B_PLAY
A_PLAY=PLAY
B_PLAY=PLAY
;SYNC=A_SYNC B_SYNC
A_SYNC=SYNC
B_SYNC=SYNC
;PFL=A_PFL B_PFL
A_PFL=PFL
B_PFL=PFL
;LOAD=A_LOAD B_LOAD
A_LOAD=LOAD
B_LOAD=LOAD
;BEND_UP=A_BEND_UP B_BEND_UP
A_BEND_UP=BEND_UP
B_BEND_UP=BEND_UP
;BEND_DOWN=A_BEND_DOWN B_BEND_DOWN
A_BEND_DOWN=BEND_DOWN
B_BEND_DOWN=BEND_DOWN
;VOLUME=A_VOLUME B_VOLUME
A_VOLUME=VOLUME
B_VOLUME=VOLUME
;PITCH=A_PITCH B_PITCH
A_PITCH=PITCH
B_PITCH=PITCH
; wheel
A_WHEEL=JOGWHEEL
B_WHEEL=JOGWHEEL

; format: ACTION=midi note id
; Leds are toggled via midi note on messages.
;
[leds]
deck.cue(1)=$33
deck.cue(2)=$3C
deck.play(1)=$3B
deck.play(2)=$42
deck.sync(1)=$40
deck.sync(2)=$47
mixer.eq.kill(1)=$65
mixer.eq.kill(2)=$66

; not implemented!
;
[scripts]
deck.cue.start=midiout NOTE_ON #CUE 1
deck.cue.stop=midiout NOTE_ON #CUE 0
deck.play.start=midiout NOTE_ON #PLAY 1 NOTE_ON #CUE 0
deck.play.stop=midiout NOTE_ON #PLAY 0 NOTE_ON #CUE 0

; Maps controls to actions in Decks.
; format: CONTROL=action(optional deck number)
; * CONTROL can be a group as defined in the [groups] section
; * action can be prepended by a + or - to signify change direction
;   when bound to a button control
;
; Currently supported actions:
;
; deck.play()       Plays/pauses the track on a deck.
; deck.cue()        Toggles deck cueing.
; deck.sync()       x
; deck.reverse()    Toggles reverse playback on a deck.
; deck.load()       Loads the highlighted song into a deck.
; deck.amp()        Controls the amplification knob on a deck.
; deck.bend()       Pitch bend up/down on a deck.
; mixer.eq.low()    Equalizer (low band) on a deck.
; mixer.eq.mid()    Equalizer (mid band) on a deck.
; mixer.eq.high()   Equalizer (high band) on a deck.
; mixer.eq.kill()   Toggles low EQ kill on a deck.
; mixer.crossfader  Controls the mixer crossfader position.
; ui.list           Selects between the directory list and file list.
; ui.select         Moves selection up/down on the active list.
; ui.select.toggle  Toggles a treenode on the directory list.
; ui.select.open    Lists the files in the selected directory.
;
; Items marked with () above accept an optional Deck number (1=left, 2=right).
; If no deck number is specified,
; * if action ends with "()", CONTROL is taken to be a group name, and
;   a mapping is automatically created for each control in the group,
;   starting from Deck number 1.
; * if mapped to a single control, affects the currently selected deck.
;
[mappings]
CUE=deck.cue()
PLAY=deck.play()
SYNC=deck.sync()
BEND_UP=+deck.bend()
BEND_DOWN=-deck.bend()
A_WHEEL=deck.seek(1)
B_WHEEL=deck.seek(2)
VOLUME=deck.amp()
PITCH=mixer.eq.low()
PFL=mixer.eq.kill()
CROSSFADER=mixer.crossfader
BACK=-ui.list
ENTER=+ui.list
BROWSE=ui.select
A_LOAD=ui.select.toggle(1)
B_LOAD=ui.select.open(2)

[macro.dirtoggle_or_load1]
ifactive=dirlist ui.select.toggle
ifactive=filelist deck.load(1)

[macro.diropen_or_load2]
ifactive=dirlist ui.select.open
ifactive=filelist deck.load(2)
